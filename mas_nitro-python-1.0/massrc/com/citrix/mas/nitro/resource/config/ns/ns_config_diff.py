'''
Copyright (c) 2008-2015 Citrix Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''


from massrc.com.citrix.mas.nitro.resource.Base import *
from massrc.com.citrix.mas.nitro.service.options import options
from massrc.com.citrix.mas.nitro.exception.nitro_exception import nitro_exception
from massrc.com.citrix.mas.nitro.util.filtervalue import filtervalue
from massrc.com.citrix.mas.nitro.resource.Base.base_resource import base_resource
from massrc.com.citrix.mas.nitro.resource.Base.base_response import base_response


'''
Configuration for NetScaler Configuration Diff resource
'''

class ns_config_diff(base_resource):
	_diff_data= ""
	_params_targetvalue= ""
	_diff_file= ""
	_source_file= ""
	_params_value= ""
	_diff_response= ""
	_source_command= ""
	_ns_ip_address= ""
	_target_file= ""
	_corrective_command= ""
	_target_command= ""
	_params_name= ""
	__count=""
	'''
	get the resource id
	'''
	def get_resource_id(self) :
		try:
			if hasattr(self, 'id'):
				return self.id 
			else:
				return None 
		except Exception as e :
			raise e

	'''
	get the resource type
	'''
	def get_object_type(self) :
		try:
			return "ns_config_diff"
		except Exception as e :
			raise e

	'''
	Returns the value of object identifier argument.
	'''
	def get_object_id(self) :
		try:
			return self._ns_ip_address
		except Exception as e :
			raise e

	'''
	Returns the value of object file path argument.
	'''
	@property
	def file_path_value(self) :
		try:
			return None
		except Exception as e :
			raise e

	'''
	Returns the value of object file component name.
	'''
	@property
	def file_component_value(self) :
		try :
			return "ns_config_diffs"
		except Exception as e :
			raise e



	'''
	get Diff data in XML format.
	'''
	@property
	def diff_data(self) :
		try:
			return self._diff_data
		except Exception as e :
			raise e
	'''
	set Diff data in XML format.
	'''
	@diff_data.setter
	def diff_data(self,diff_data):
		try :
			if not isinstance(diff_data,str):
				raise TypeError("diff_data must be set to str value")
			self._diff_data = diff_data
		except Exception as e :
			raise e


	'''
	get Params target value seen in the diff output
	'''
	@property
	def params_targetvalue(self) :
		try:
			return self._params_targetvalue
		except Exception as e :
			raise e


	'''
	get Name of the file containing diff between source and target file generated by a schedule diff operation.
	'''
	@property
	def diff_file(self) :
		try:
			return self._diff_file
		except Exception as e :
			raise e
	'''
	set Name of the file containing diff between source and target file generated by a schedule diff operation.
	'''
	@diff_file.setter
	def diff_file(self,diff_file):
		try :
			if not isinstance(diff_file,str):
				raise TypeError("diff_file must be set to str value")
			self._diff_file = diff_file
		except Exception as e :
			raise e


	'''
	get NS configuration source file
	'''
	@property
	def source_file(self) :
		try:
			return self._source_file
		except Exception as e :
			raise e
	'''
	set NS configuration source file
	'''
	@source_file.setter
	def source_file(self,source_file):
		try :
			if not isinstance(source_file,str):
				raise TypeError("source_file must be set to str value")
			self._source_file = source_file
		except Exception as e :
			raise e


	'''
	get Params value seen in the diff output
	'''
	@property
	def params_value(self) :
		try:
			return self._params_value
		except Exception as e :
			raise e


	'''
	get Diff between source and target file
	'''
	@property
	def diff_response(self) :
		try:
			return self._diff_response
		except Exception as e :
			raise e


	'''
	get Diff command ouput present in source
	'''
	@property
	def source_command(self) :
		try:
			return self._source_command
		except Exception as e :
			raise e


	'''
	get NS IP Address
	'''
	@property
	def ns_ip_address(self) :
		try:
			return self._ns_ip_address
		except Exception as e :
			raise e
	'''
	set NS IP Address
	'''
	@ns_ip_address.setter
	def ns_ip_address(self,ns_ip_address):
		try :
			if not isinstance(ns_ip_address,str):
				raise TypeError("ns_ip_address must be set to str value")
			self._ns_ip_address = ns_ip_address
		except Exception as e :
			raise e


	'''
	get NS configuration target file
	'''
	@property
	def target_file(self) :
		try:
			return self._target_file
		except Exception as e :
			raise e
	'''
	set NS configuration target file
	'''
	@target_file.setter
	def target_file(self,target_file):
		try :
			if not isinstance(target_file,str):
				raise TypeError("target_file must be set to str value")
			self._target_file = target_file
		except Exception as e :
			raise e


	'''
	get Corrective command
	'''
	@property
	def corrective_command(self) :
		try:
			return self._corrective_command
		except Exception as e :
			raise e


	'''
	get Diff command ouput present in target
	'''
	@property
	def target_command(self) :
		try:
			return self._target_command
		except Exception as e :
			raise e


	'''
	get Params name seen in the diff output
	'''
	@property
	def params_name(self) :
		try:
			return self._params_name
		except Exception as e :
			raise e

	'''
	 Use this operation to get diff table report.
	'''
	@classmethod
	def diff_table_report(cls,service=None,resource=None):
		try:
			if resource is None :
				raise Exception("Resource Object Not Found")
			if type(resource) is not list :
				return resource.perform_operation(service,"diff_table_report")
			else : 
				ns_config_diff_obj= ns_config_diff()
				return cls.perform_operation_bulk_request(service,"diff_table_report", resource,ns_config_diff_obj)
		except Exception as e :
			raise e

	'''
	Converts API response into object and returns the object array in case of get request.
	'''
	def get_nitro_response(self,service ,response):
		try :
			result=service.payload_formatter.string_to_resource(ns_config_diff_response, response, self.__class__.__name__)
			if(result.errorcode != 0) :
				if (result.errorcode == 444) :
					service.clear_session(self)
				if result.severity :
					if (result.severity == "ERROR") :
						raise nitro_exception(result.errorcode, str(result.message), str(result.severity))
				else :
					raise nitro_exception(result.errorcode, str(result.message), str(result.severity))
			return result.ns_config_diff
		except Exception as e :
			raise e


	'''
	Converts API response into object and returns the object array .
	'''
	def get_nitro_bulk_response(self,service ,response):
		try :
			result=service.payload_formatter.string_to_resource(ns_config_diff_responses, response, "ns_config_diff_response_array")
			if(result.errorcode != 0) :
				if (result.errorcode == 444) :
					service.clear_session(self)
				response = result.ns_config_diff_response_array
				i=0
				error = [ns_config_diff() for _ in range(len(response))]
				for obj in response :
					error[i]= obj._message
					i=i+1
				raise nitro_exception(result.errorcode, str(result.message), error)
			response = result.ns_config_diff_response_array
			i=0
			ns_config_diff_objs = [ns_config_diff() for _ in range(len(response))]
			for obj in response :
				if hasattr(obj,'_ns_config_diff'):
					for props in obj._ns_config_diff:
						result = service.payload_formatter.string_to_bulk_resource(ns_config_diff_response,self.__class__.__name__,props)
						ns_config_diff_objs[i] = result.ns_config_diff
						i=i+1
			return ns_config_diff_objs
		except Exception as e :
			raise e


	'''
	Performs generic data validation for the operation to be performed
	'''
	def validate(self,operationType):
		try:
			super(ns_config_diff,self).validate()
		except Exception as e :
			raise e

'''
Forms the proper response.
'''
class ns_config_diff_response(base_response):
	def __init__(self,length=1) :
		self.ns_config_diff= []
		self.errorcode = 0 
		self.message = "" 
		self.severity = "" 
		self.ns_config_diff= [ ns_config_diff() for _ in range(length)]
'''
Forms the proper response for bulk operation.
'''
class ns_config_diff_responses(base_response):
	def __init__(self,length=1) :
		self.ns_config_diff_response_array = []
		self.errorcode = 0 
		self.message = "" 
		self.ns_config_diff_response_array = [ ns_config_diff() for _ in range(length)]
